<?xml version="1.0" encoding="UTF-8" ?>
<!--引入约束文件,DTD约束头-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--根标签  命名空间,与下面语句的id一起组成查询的标识-->
<mapper namespace="cn.com.mryhl.mapper.UserMapper">

    <!--查询一条记录-->
    <!--
        手动映射封装
            id="BaseMap" 该标签的唯一标识
            type="cn.com.mryhl.domain.User" 封装后的java类型
    -->
    <resultMap id="BaseMap" type="cn.com.mryhl.domain.User">
        <!--
            column="uid" 数据库查询的字段名
            property="id" 需要封装到实体属性名
        -->
        <id column="uid" property="id"></id>
        <result column="name" property="username"></result>
        <result column="bir" property="birthday"></result>
        <result column="gender" property="sex"></result>
        <result column="addr" property="address"></result>
    </resultMap>


    <!--查询一个-->
    <select id="findById" parameterType="int" resultMap="BaseMap">
        SELECT id AS uid,username AS `name`, birthday AS bir,sex AS gender, address AS addr FROM USER WHERE id = #{id}
    </select>

    <!--多条件查询-->
    <!--
    多条件查询方式一
        注意：此parameterType属性只能出现一次，如果传递多个值，可以省略
    -->
    <select id="findByIdAndUsername1" resultType="cn.com.mryhl.domain.User">
        <!-- select * from user where id = #{arg0} and username = #{arg1} -->
        select * from user where id = #{param1} and username = #{param2}
    </select>

    <!--
    多条件查询方式二
    注意：此parameterType属性只能出现一次，如果传递多个值，可以省略
    -->
    <select id="findByIdAndUsername2" resultType="cn.com.mryhl.domain.User">
    select * from user where id = #{id} and username = #{username}
    </select>

    <!--
    多条件查询方式三
    -->
    <select id="findByIdAndUsername3" parameterType="cn.com.mryhl.domain.User" resultType="cn.com.mryhl.domain.User">
    select * from user where id = #{id} and username = #{username}
    </select>


    <!--模糊查询-->
    <!--
           模糊查询方式一
    -->

    <select id="findLikeUsername1" parameterType="string" resultType="cn.com.mryhl.domain.User">
    select * from user where username like #{username}
    </select>


    <!--
   模糊查询方式二
    oracle数据库 双引号除了别名的位置上，其他地方使用报错...
    -->

    <select id="findLikeUsername2" parameterType="string" resultType="cn.com.mryhl.domain.User">
      select * from user where username like "%" #{username} "%"
    </select>

    <!--
   模糊查询方式三
    ${} 底层使用字符串拼接，可能会出现sql注入问题，开发绝对不用
    如果你传递的是简单数据类型 ${value}
    -->

    <select id="findLikeUsername3" parameterType="string" resultType="cn.com.mryhl.domain.User">
      select * from user where username like '%${value}%'
    </select>

    <!--
   模糊查询方式四
    使用concat()函数帮我们进行拼接，注意oracle数据库中此函数只能传递二个参数，需要进行嵌套
    -->

    <select id="findLikeUsername4" parameterType="string" resultType="cn.com.mryhl.domain.User">
        select * from user where username like  concat(concat('%',#{username}),'%')
    </select>


    <!--
    返回主键 方式一
        useGeneratedKeys="true" 开启返回主键功能
        keyColumn="id" 数据库主键列
        keyProperty="id" 实体主键属性

        这种方式操作虽然简单，但仅支持主键自增类型的数据库：mysql、sqlServer
    -->
    <!--<insert id="save" parameterType="cn.com.mryhl.domain.User" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
         insert into user values(null,#{username},#{birthday},#{sex},#{address})
    </insert>-->

    <!--
    返回主键方式二
        keyColumn="id" 表的主键列
        keyProperty="id" 实体的主键属性
        resultType="int" 实体主键的java类型
        order="AFTER"  selectKey标签sql语句的执行时机
            before：在insert语句执行之前，执行
            after：在insert语句执行之后，执行

        这种方式虽然繁琐，但是通用...
-->
    <insert id="save" parameterType="cn.com.mryhl.domain.User">
        <selectKey keyColumn="id" keyProperty="id" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into user values(#{id},#{username},#{birthday},#{sex},#{address})
    </insert>

</mapper>